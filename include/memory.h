#pragma once

#include <array>
#include <cstdint>
#include <string>
#include "instruction.h"
typedef uint16_t word;

namespace chip8 {
    constexpr uint16_t MEMORY_SIZE = 1<<12;

    constexpr std::array<uint16_t,80> chip8_fontset = {
        0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
        0x20, 0x60, 0x20, 0x20, 0x70, // 1
        0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
        0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
        0x90, 0x90, 0xF0, 0x10, 0x10, // 4
        0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
        0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
        0xF0, 0x10, 0x20, 0x40, 0x40, // 7
        0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
        0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
        0xF0, 0x90, 0xF0, 0x90, 0x90, // A
        0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
        0xF0, 0x80, 0x80, 0x80, 0xF0, // C
        0xE0, 0x90, 0x90, 0x90, 0xE0, // D
        0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
        0xF0, 0x80, 0xF0, 0x80, 0x80  // F
    };

    class Memory {
        private:
            static std::array<uint8_t, MEMORY_SIZE> buffer; //4 kilobytes memory
        public:
            Memory();
            static void clear();

            //address is 3 hex chars so 000 - FFF
            static uint8_t read(word address);
            static void write(word address, uint8_t value);
            static void write_word(word content, word address);
            static word read_word(word address);
            static void load_font();
            static void load_rom(const std::string& path);
            static instruction::Instruction read_instruction(word address);
    };
} //namespace chip8
